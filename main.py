import os
import logging
import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")],
        [InlineKeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="crypto")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "weather":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥>")
    elif query.data == "news":
        await news(query.message, context)
    elif query.data == "joke":
        await joke(query.message, context)
    elif query.data == "crypto":
        await crypto(query.message, context)
    elif query.data == "nasa":
        await nasa_apod(query.message, context)

# –ö–æ–º–∞–Ω–¥–∞ /weather
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = " ".join(context.args)
    if not city:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥>")
        return

    api_key = os.getenv("OPENWEATHERMAP_API_KEY")
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        temp = data["main"]["temp"]
        weather_desc = data["weather"][0]["description"]
        await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {weather_desc}, {temp}¬∞C")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /news
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    api_key = os.getenv("NEWS_API_KEY")
    url = f"https://newsapi.org/v2/top-headlines?country=ru&apiKey={api_key}"
    response = requests.get(url)

    if response.status_code == 200:
        articles = response.json()["articles"][:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –Ω–æ–≤–æ—Å—Ç—è–º–∏
        for article in articles:
            await update.message.reply_text(f"{article['title']}\n{article['url']}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /joke
async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = requests.get("https://v2.jokeapi.dev/joke/Any?lang=ru")
    if response.status_code == 200:
        joke_data = response.json()
        if joke_data["type"] == "single":
            await update.message.reply_text(joke_data["joke"])
        else:
            await update.message.reply_text(f"{joke_data['setup']}\n{joke_data['delivery']}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ /crypto
async def crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    coin = "bitcoin"
    response = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={coin}&vs_currencies=usd")
    if response.status_code == 200:
        price = response.json()[coin]["usd"]
        await update.message.reply_text(f"–¶–µ–Ω–∞ Bitcoin: ${price}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /nasa
async def nasa_apod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    api_key = os.getenv("NASA_API_KEY")
    response = requests.get(f"https://api.nasa.gov/planetary/apod?api_key={api_key}")
    if response.status_code == 200:
        await update.message.reply_photo(response.json()["url"])
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω—è –æ—Ç NASA.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("weather", weather))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
