import os
import logging
from dotenv import load_dotenv
from telegram import Update, constants
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –∏ –º–æ–¥–µ–ª–∏ Gemini
genai.configure(api_key=os.environ["GEMINI_API_KEY"])
generation_config = {
    "temperature": 0.7,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 65536,
    "response_mime_type": "text/plain",
}
model = genai.GenerativeModel(
    model_name="gemini-2.0-flash-thinking-exp-01-21",
    generation_config=generation_config,
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
chat_session = model.start_chat(history=[])

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
def get_weather(city: str):
    url = f"https://api.open-meteo.com/v1/forecast?latitude=0&longitude=0&current_weather=true"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ geocode API
    geo_url = f"https://geocoding-api.open-meteo.com/v1/search?name={city}&count=1&language=ru"
    geo_response = requests.get(geo_url).json()

    if "results" not in geo_response or not geo_response["results"]:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."

    latitude = geo_response["results"][0]["latitude"]
    longitude = geo_response["results"][0]["longitude"]
    url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    response = requests.get(url).json()
    if "current_weather" not in response:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

    weather = response["current_weather"]
    temperature = weather["temperature"]
    wind_speed = weather["windspeed"]
    conditions = weather["weathercode"]

    # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–≥–æ–¥—ã
    weather_conditions = {
        0: "–Ø—Å–Ω–æ",
        1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ",
        2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        3: "–ü–∞—Å–º—É—Ä–Ω–æ",
        45: "–¢—É–º–∞–Ω",
        48: "–õ–µ–¥—è–Ω–æ–π —Ç—É–º–∞–Ω",
        51: "–õ–µ–≥–∫–∏–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å",
        53: "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å",
        55: "–°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å",
        61: "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å",
        63: "–î–æ–∂–¥—å",
        65: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
        71: "–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥",
        73: "–°–Ω–µ–≥–æ–ø–∞–¥",
        75: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥",
        80: "–õ–µ–≥–∫–∏–π –ª–∏–≤–µ–Ω—å",
        81: "–õ–∏–≤–µ–Ω—å",
        82: "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å",
    }
    
    weather_desc = weather_conditions.get(conditions, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")

    return f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\nüí® –í–µ—Ç–µ—Ä: {wind_speed} –∫–º/—á\n‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {weather_desc}"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
                                    "–ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /weather –ú–æ—Å–∫–≤–∞")

# –ö–æ–º–∞–Ω–¥–∞ /weather
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
        return

    city = " ".join(context.args)
    weather_info = get_weather(city)
    await update.message.reply_text(weather_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)

    try:
        response = chat_session.send_message(user_input)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        max_length = 4096
        if len(response.text) > max_length:
            for i in range(0, len(response.text), max_length):
                part = response.text[i:i + max_length]
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(response.text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(os.environ["TELEGRAM_BOT_TOKEN"]).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("weather", weather))  # –£–±–∏—Ä–∞–µ–º pass_args
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), echo))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
        
